---
code-annotations: hover
citation-location: margin
---

# Marginale Effecten {#sec-marginal-effects}

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false

#Packages
library(rio)             #laden van data
library(tidyverse)       #data manipulatie en grafieken
library(marginaleffects) #voorspelde waarden en marginale effecten berekenen

#Data
ESS9NL <- import("data/ESS9e03, Netherlands.sav")

```

In het vorige hoofdstuk leerden we een logistisch regressiemodel schatten en interpreteren met behulp van de coëeificiënten en odds ratios. Beide zijn echter niet erg intuïtief. Wat we vaak echt willen weten is hoeveel de kans op Y=1 verandert als de onafhankelijke variabele met 1 eenheid stijgt. We kunnen naar de marginale effecten van onze onafhankelijke variabelen kijken om iets te zeggen over de verandering in de *probabiliteit* dat Y=1. We gebruiken hiervoor functies uit het `marginaleffects` package.

We gebruiken volgende packages en data:

```{r}
#| eval: false

#Packages
library(rio)             #laden van data
library(tidyverse)       #data manipulatie en grafieken
library(marginaleffects) #voorspelde waarden en marginale effecten berekenen

#Data
ESS9NL <- import("ESS9e03, Netherlands.sav")
```

## Data Management, voorbeeldmodel, en problemen met `factorize()`

We maken gebruiken van eenzelfde model dat we gebruikt hebben in vorig hoofdstuk. Daarin voorspelden we stemmen op basis van gender, leeftijd, vertouwen in politici en linsk-rechtsideologie. We herhalen eerst een paar data management stappen:

```{r}
#Data Preparation
ESS9NL <- ESS9NL |>
  #Factor maken van categorische variabelen
  mutate(gndr = factorize(gndr), # <1> 
         vote = factorize(vote))  |> 
  #Not Eligible op missing zetten
  mutate(vote = na_if(vote,"Not eligible to vote")) |> # <1> 
  #Relevel van variabelen
  mutate(vote = relevel(vote, "No"), 
         gndr = relevel(gndr, "Female"))

#Het model
Vote_model_mp <- glm(vote ~ gndr + agea + trstplt + lrscale, 
                data = ESS9NL, family = "binomial")

#Resultaten printen
summary(Vote_model_mp)
```

1.  We zouden ook deze 3 `mutate()` stappen in 1 stap kunnen combineren.

Het `marginaleffects`package is niet volledig compatibel met de `factorize` functie die we hierboven hebben gebruikt voor gender. Laten we even kijken naar de `gndr`variabele:

```{r}
levels(ESS9NL$gndr)
table(ESS9NL$gndr)

```

Er zijn 3 niveaus of levels voor `gndr`: "Female", "Male", en "No Answer". Er vallen echter 0 respondente onder "No Answer". In dergelijke situaties zal onderstaande functie een error geven omdat de functie zoekt naar een derde niveau dat er niet is.

Om dit te voorkomen kunnen we gebruik maken va de `droplevels()` functie om lege niveaus te verwijderen. Of we gebruiken `factor()` om `gndr` een factor variabele te maken. Zie. @sec-slopes-error in de Veelvoorkomende Fouten Appendix voor meer informatie.

```{r}
#Drop levels: verwijderen van categorieën zonder observaties
ESS9NL <- ESS9NL |>
  mutate(gndr = droplevels(gndr))

#Checken van syntax
levels(ESS9NL$gndr)
table(ESS9NL$gndr)
```

## Gemiddelde Marginale Effecten (AME)

De eerste soort marginale effecten die we bekijken zijn de gemiddelde marginale effecten: de Average Marginal Effect (AME). We gebruiken hiervoor de `avg_slopes()` functie uit `marginaleffects`. De AME geeft de gemiddelde verandering in probabiliteit dat Y=1 weer (in termen van percentpunten) als de onafhankelijke met 1 eenheid omhoog gaat (dy/dx). We bereken het marginale effect voor elke observatie en elke variabele in het model en nemen dan het gemiddelde per variabele. Deze figuur beschrijft het proces (uit @heiss2022):

![AME berekening door avg_slopes](figures/flow-ame.png)

Laten we kijken naar de AMEs van ons model:

```{r}
#Schatten van AMEs obv model
AME <- avg_slopes(Vote_model_mp,
                  conf_level = 0.95)

```

De syntax lees je zo

`AME <- avg_slopes(Vote_model_mp,`

:   We gebruiken de functie avg_slopes op het model tussen haakjes. De resultaten slaan we op in een nieuw data object (AME).

`conf_level = 0.95)`

:   Standaard wordt een betrouwbaarheidsniveau van 95% gebruikt, dus deze code kan weggelaten worden als dit het gewenste niveau is. Met de code kun je het niveau ook veranderen (bv. 0.99).

Dit is de output:

```{r}
tibble(AME) # <1> 
```

1.  We zouden `AME` kunne typen eerder dan `tibble(AME)` maar dit geeft andere kolomnamen. We gebruiken `tibble()` om de kolomnamen te zien zoals ze ook in de dataset zijn opgeslagen. Zie de waarschuwing hiervover in Hoofdstuk 5 @sec-predicted-residual-values.

::: callout-note
#### Output uitleg

-   `term`: bevat de namen van de variabelen (bv., `agea`, `gndr`, etc.).
-   `contrast`: Het 'contrast' duidt aan welke vergelijking gemaakt wordt: 1 eenheid toename voor continue variabelen, een verandering van categorie voor factor variabelen.
-   `estimate`: De AME
-   `std.error` t.e.m. `conf.high`: Informatie over de onzekerheid van de schatting.
:::

::: callout-warning
#### Interpretatie

De gemiddelde marginale effecten (AMEs) geven weer wat de gemiddelde verandering is in de probabiliteit dat Y=1 (in percentpunten) als X met 1 eenheid stijgt. De percentpunten verkrijg je door de AME schatting te vermenigvuldigen met 100. Bijvoorbeeld:

-   De kans om te stemmen is gemiddeld 0.5 percentpunten hoger voor een mannelijke respondent dan voor een vrouwelijke respondent.
-   De kans om te stemmen stijgt gemiddeld met 2.3 percentpunten met elke eenheid dat respondenten meer vertrouwen hebben in politici.
:::

## Effecten op gemiddelde waarden van de predictors (MEM)

We raden aan om AME te gebruiken als je marginale effecten op basis van een logistische regressie interpreteert. Echter zie je ook soms onderzoek waarin men gebruik maakt van "effecten op gemiddelde waarden": "marginal effect at the mean" of MEM. Daarmee berekenen we het effect op de probabiliteit dat Y=1 wanneer predictors hun gemiddelde waarden aannemen, of de modus bij categorische variabelen. Deze figuur beschrijft de berekening (uit @heiss2022):

![He avg_slopes de MEM berekent](figures/flow-mem.png)

De syntax wordt licht aangepast voor de MEM;

```{r}
MEM <- slopes(Vote_model_mp, 
              conf_level = 0.95,
              newdata = datagrid()
              )
```

`newdata = datagrid()`

:   We maken een nieuwe dataset voor de berekening waarin alle onafhankelijke variabelen op hun gemiddelde of modus worden gehouden.

Laten we kijken naar de resultaten:

```{r}
tibble(MEM)
```

Behalve estimate, standaardfout, test statistiek, p-waarde, en onder- en bovengrens van de betrouwbaarheidsintervallen, bevat de MEM dataset ook de gemiddelden en/of modus waarden voor de predictoren.

```{r}
MEM |> 
  select(gndr, agea, trstplt, lrscale) |> 
  as_tibble()
```

::: callout-warning
#### Interpretatie

De interpretatie van MEMs is gelijkaardig aan die van AME: Welke gemiddelde verandering in de kans dat Y=1 verwachten we als X 1 eenheid stijgt? Vermenigvuldigen met 100 leidt tot een interpretatie in termen van percentpunten. De gemiddelde verandering is nu wel berekend wanneer onafhankelijke variabelen hun gemiddelde waarden aannemen. Dit moet gerapporteerd worden. Bijvoorbeeld: mannelijke respondenten hebben een 0.5 percentpunten hogere kans om te stemmen dan vrouwelijke respondenten, als leeftijd, ideologie, en vertrouwen in politici constant worden gehouden op hun gemiddelde waarde.
:::
